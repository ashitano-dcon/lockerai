name: graphql deploy apollo studio

on:
  push:
    branches:
      - main

env:
  DATABASE_URL: postgresql://postgres:postgres@localhost:54322/postgres
  IDENTIFICATION_NN_ENDPOINT: ${{ secrets.IDENTIFICATION_NN_ENDPOINT }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  filter:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      graphql: ${{ steps.changes.outputs.graphql }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: check for file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/filter.yaml

  deploy-apollo-studio:
    runs-on: ubuntu-latest
    env:
      APOLLO_KEY: ${{ secrets.APOLLO_KEY }}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_AUTH_EXTERNAL_GOOGLE_CLIENT_ID: ${{ secrets.SUPABASE_AUTH_EXTERNAL_GOOGLE_CLIENT_ID }}
      SUPABASE_AUTH_EXTERNAL_GOOGLE_SECRET: ${{ secrets.SUPABASE_AUTH_EXTERNAL_GOOGLE_SECRET }}
      SUPABASE_AUTH_EXTERNAL_GOOGLE_URL: ${{ secrets.SUPABASE_AUTH_EXTERNAL_GOOGLE_URL }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
    needs: filter
    if: needs.filter.outputs.graphql == 'true'
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup supabase cli
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: setup node and pnpm
        uses: moonrepo/setup-toolchain@v0
        with:
          # A GitHub action that sets up an environment for proto and moon.
          # - Installs proto globally so that installed tools can also be executed globally.
          # - Caches the toolchain (~/.proto) so subsequent runs are faster.
          # - Hashes .prototools and .moon/toolchain.yml files to generate a unique cache key.
          # - Cleans the toolchain before caching to remove unused or stale tools.
          # See: https://github.com/moonrepo/setup-toolchain
          auto-install: true

      - name: get pnpm store
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: install dependencies
        run: pnpm install --frozen-lockfile

      - name: authenticate to supabase
        run: pnpm supabase link --project-ref ${{ secrets.SUPABASE_REFERENCE_ID }}

      - name: start supabase
        run: pnpm supabase start

      - name: generate graphql schema
        run: pnpm api generate && timeout 15 pnpm api dev
        continue-on-error: true

      - name: publish graphs
        run: pnpm api apollo:rover

  graphql-deploy-apollo-check:
    runs-on: ubuntu-latest
    needs: deploy-apollo-studio
    if: ${{ ! failure() }}
    steps:
      - name: check
        run: echo "test is successfully executed."
