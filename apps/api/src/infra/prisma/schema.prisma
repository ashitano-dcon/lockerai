generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector", schema: "public")]
}

enum UserRole {
  USER
  OCCUPIER
}

enum LostAndFoundState {
  NONE
  DELIVERING
  RETRIEVING
}

model User {
  id                  String            @id @default(uuid()) @db.Uuid
  authId              String            @unique @map("auth_id") @db.Uuid
  hashedFingerprintId String?           @unique @map("hashed_fingerprint_id") @db.Char(64)
  name                String            @map("name") @db.VarChar(64)
  email               String            @map("email") @db.VarChar(320)
  role                UserRole          @default(USER)
  lostAndFoundState   LostAndFoundState @default(NONE) @map("lost_and_found_state")
  avatarUrl           String            @map("avatar_url")

  isDiscloseAsOwner Boolean @default(true) @map("is_disclose_as_owner")

  reportedLostItems LostItem[] @relation(name: "reporter-and-reported-lost-items")
  ownedLostItems    LostItem[] @relation(name: "owner-and-owned-lost-items")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

  @@map("users")
}

model LostItem {
  id                  String                @id @default(uuid()) @db.Uuid
  title               String                @map("title")
  description         String                @map("description")
  embeddedDescription Unsupported("vector") @map("embedded_description")
  imageUrls           String[]              @map("image_urls")

  drawerId Int?    @unique @map("drawer_id")
  drawer   Drawer? @relation(fields: [drawerId], references: [id])

  reporterId String @map("reporter_id") @db.Uuid
  reporter   User   @relation(name: "reporter-and-reported-lost-items", fields: [reporterId], references: [id])

  ownerId String? @map("owner_id") @db.Uuid
  owner   User?   @relation(name: "owner-and-owned-lost-items", fields: [ownerId], references: [id])

  reportedAt  DateTime  @default(now()) @map("reported_at") @db.Timestamp
  ownedAt     DateTime? @map("owned_at") @db.Timestamp
  deliveredAt DateTime? @map("delivered_at") @db.Timestamp
  retrievedAt DateTime? @map("retrieved_at") @db.Timestamp

  @@map("lost_items")
}

model Drawer {
  id Int @id @default(autoincrement())

  lockerId String @map("locker_id") @db.Uuid
  Locker   Locker @relation(fields: [lockerId], references: [id])

  lostItem LostItem?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

  @@map("drawers")
}

model Locker {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique @map("name") @db.VarChar(32)

  Drawer Drawer[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

  @@map("lockers")
}
